c
q
c
expense_list.account_balance_between(start_date, end_date)
end_date
start_date
c
start_date
c
expenses_between(start_date, end_date).sum(:expenses_in_euro)
c
expenses_in_year(year).pluck(:expenses_in_euro)
expenses_in_year(year).sum(:expenses_in_euro)
expenses_in_year(year)
c
start_date.to_date.end_of_month
start_date.to_date
start_date
n
c
expenses_between(start_date, end_date).sum(:expenses_in_euro).to_i
months_between(start_date, end_date)
month_between(start_date, end_date)
end_date
start_date
c
date_of_last_expense
c
end_date
c
start_date.end_of_month
start_date
end_date.end_of_month
end_date
e.pluck(:expenses_in_euro)
e = expenses.where("expense_date BETWEEN ? AND ?", start_date, end_date)
expenses.where("expense_date BETWEEN ? AND ?", start_date, end_date).pluck(:expenses_in_euro).sum.to_i
c
end_month
start_month
expenses.sum(:expenses_in_euro).to_i
expenses.sum(:expenses_in_euro)
expenses
sum_of_exp_between(start_month, start_year, end_month, end_year)
budget_in_euro
months_in_date_range
a
c
start_date
end_date
expenses.where("expense_date BETWEEN ? AND ?", start_date, end_date).pluck(:expenses_in_euro).sum.to_i
expenses.where("expense_date BETWEEN ? AND ?", start_date, end_date).pluck(:expenses_in_euro).sum
c
[1,2,3,4].sum
expenses_in_date_range
end_month
end_year
start_year
start_month
months_in_date_range
budget_in_euro * months_in_date_range - expenses_in_date_range
c
end_month
end_month,
end_year
expenses_in_date_range
months_in_date_range
budget_in_euro
c
start_month
end_month
months_in_date_range
c
budget_in_euro
c
budget_in_euro.to_i
budget_in_euro
c
budget_in_euro
c
budget_in_euro
months_in_date_range
expenses_in_date_range
c
@expense_list
c
@expense_list
c
@expense_list
c
@expense_list.created_at.to_s
@expense_list.created_at
c
total ?c
total ? 0 : total.to_i
total.to_i
total
c
n
c
total.nil?
total.nil
total ?
total
n
c
total
expenses.sum(:expenses_in_euro)
expenses
c
ExpenseList.all
continue
ExpenseList.count
ExpenseList.all
q
reload
reload!
expenses.pluck(:expenses_in_euro).sum
[1,2,3].sum
sum([1,2,3])
expenses.pluck(:expenses_in_euro).reduce(&:+)
expenses.pluck(:expenses_in_euro)
self
continue
self
Expense.where(id: self.id)
Expense
self.expenses
self
c
e.user
e.users
e = Expense.first
Expense.all
ExpenseList.all
q
get :show, id: 741146158
ExpenseList.all
get :show, id: 28
q
{} == true
expenses
n
expenses.group_by(&:user_id)
expenses
c
user
iser
c
q
session
c
n
m
n
m
@user
q
c
@user
c
params[:sessions][:password]
@user
n
c
q
x
@expense_list.id
@expense_list
@user
get :show, id: @expense_list.id
c
continue
c
@expense_list
@user
iser
c
session
@user
q
cq
c
expense_list.expenses
expense_list
c
expense_list
Expense.all
c
URI
url
params
name
expense_list.name
c
Date.today
url
c
Notifier.budget_critical(User.first.email, expense_list).deliver_now
n
c
Notifier.budget_critical(User.first.email, expense_list).deliver_now
n
c
Notifier.budget_critical(User.first.email, expense_list).deliver_now
Notifier.critical_budget(User.first.email, expense_list).deliver_now
User.first
User.all
expense_list.euros_left_in_month(curr_month, curr_year) < thresh * budget
=> 24:     if expense_list.euros_left_in_month(curr_month, curr_year) < thresh * budget
expense_list.euros_left_in_month(curr_month, curr_year).to_i
expense_list.euros_left_in_month(curr_month, curr_year)
curr_year
n
curr_month
n
budget.to_i
budget
n
c
expenses
c
year.to_i
month.to_i
year
month
 expenses.map(&:expenses_in_euro).reduce(&:+)
c
n
c
sum_of_exp_in_month(expense_list, "05", "15").to_i
sum_of_exp_in_month(expense_list, "05", "15")
sum_of_exp_in_month
expense_list
expenses
c
a.when.strftime('%m').to_i == month
a.when.strftime('%m').to_i
a.when.strftime('%m') == month.to_s
month.to_s
month
a.when.strftime('%m') == month
a.when.strftime('%m')
a.when.strftime
a.when
a
a = expense_list.expenses[1]
expense_list.expenses[1]
expense_list.expenses[2]
expense_list.expenses.map { |e| e.when }
expense_list.expenses.first.when
expense_list.expenses.first
expense_list.expenses
expense_list
month
expenses
